
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: LogEntry
// Generated by IntelliTect.Coalesce

module ListViewModels {

    export namespace LogEntryDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.LogEntry> { }
                
        export class OnlineLogs extends Coalesce.DataSource<ViewModels.LogEntry> {
        }
        
        export class OfflineLogs extends Coalesce.DataSource<ViewModels.LogEntry> {
        }
    }

    export class LogEntryList extends Coalesce.BaseListViewModel<ViewModels.LogEntry> {
        public readonly modelName: string = "LogEntry";
        public readonly apiController: string = "/LogEntry";
        public modelKeyName: string = "logEntryId";
        public itemClass: new () => ViewModels.LogEntry = ViewModels.LogEntry;

        public filter: {
            logEntryId?:string;
            callSignId?:string;
            entryDateTime?:string;
            entry?:string;
            serverId?:string;
            logEntryType?:string;
        } = null;
    
        /** 
            The namespace containing all possible values of this.dataSource.
        */
        public dataSources: typeof LogEntryDataSources = LogEntryDataSources;

        /**
            The data source on the server to use when retrieving objects.
            Valid values are in this.dataSources.
        */
        public dataSource: Coalesce.DataSource<ViewModels.LogEntry> = new this.dataSources.Default();

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<LogEntryList, ViewModels.LogEntry>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig: Coalesce.ListViewModelConfiguration<LogEntryList, ViewModels.LogEntry>
            = new Coalesce.ListViewModelConfiguration<LogEntryList, ViewModels.LogEntry>(LogEntryList.coalesceConfig);


        protected createItem = (newItem?: any, parent?: any) => new ViewModels.LogEntry(newItem, parent);

        constructor() {
            super();
        }
    }
}
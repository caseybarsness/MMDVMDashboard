
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout List View Model for: VoiceTransmission
// Generated by IntelliTect.Coalesce

module ListViewModels {

    export namespace VoiceTransmissionDataSources {
        export class Default extends Coalesce.DataSource<ViewModels.VoiceTransmission> { }
            }

    export class VoiceTransmissionList extends Coalesce.BaseListViewModel<ViewModels.VoiceTransmission> {
        public readonly modelName: string = "VoiceTransmission";
        public readonly apiController: string = "/VoiceTransmission";
        public modelKeyName: string = "voiceTransmissionId";
        public itemClass: new () => ViewModels.VoiceTransmission = ViewModels.VoiceTransmission;

        public filter: {
            voiceTransmissionId?:string;
            transmissionDateTimeStart?:string;
            transmissionDateTimeEnd?:string;
            callSignId?:string;
            serverId?:string;
            talkGroup?:string;
            lossRate?:string;
        } = null;
    
        /** 
            The namespace containing all possible values of this.dataSource.
        */
        public dataSources: typeof VoiceTransmissionDataSources = VoiceTransmissionDataSources;

        /**
            The data source on the server to use when retrieving objects.
            Valid values are in this.dataSources.
        */
        public dataSource: Coalesce.DataSource<ViewModels.VoiceTransmission> = new this.dataSources.Default();

        public static coalesceConfig = new Coalesce.ListViewModelConfiguration<VoiceTransmissionList, ViewModels.VoiceTransmission>(Coalesce.GlobalConfiguration.listViewModel);
        public coalesceConfig: Coalesce.ListViewModelConfiguration<VoiceTransmissionList, ViewModels.VoiceTransmission>
            = new Coalesce.ListViewModelConfiguration<VoiceTransmissionList, ViewModels.VoiceTransmission>(VoiceTransmissionList.coalesceConfig);


        protected createItem = (newItem?: any, parent?: any) => new ViewModels.VoiceTransmission(newItem, parent);

        constructor() {
            super();
        }
    }
}
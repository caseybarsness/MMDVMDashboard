
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: CallSign
// Generated by IntelliTect.Coalesce

module ViewModels {

	export class CallSign extends Coalesce.BaseViewModel
    {
        public readonly modelName = "CallSign";
        public readonly primaryKeyName: keyof this = "callSignId";
        public readonly modelDisplayName = "Call Sign";
        public readonly apiController = "/CallSign";
        public readonly viewController = "/CallSign";

        /** Behavioral configuration for all instances of CallSign. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<CallSign>
            = new Coalesce.ViewModelConfiguration<CallSign>(Coalesce.GlobalConfiguration.viewModel);

        /** Behavioral configuration for the current CallSign instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<CallSign>(CallSign.coalesceConfig);
    
        /** 
            The namespace containing all possible values of this.dataSource.
        */
        public dataSources: typeof ListViewModels.CallSignDataSources = ListViewModels.CallSignDataSources;
    

        public callSignId: KnockoutObservable<number> = ko.observable(null);
        public text: KnockoutObservable<string> = ko.observable(null);
        public logEntries: KnockoutObservableArray<ViewModels.LogEntry> = ko.observableArray([]);
        public voiceTransmissions: KnockoutObservableArray<ViewModels.VoiceTransmission> = ko.observableArray([]);
        public streams: KnockoutObservableArray<ViewModels.Stream> = ko.observableArray([]);
        public logCount: KnockoutObservable<number> = ko.observable(null);
        public streamCount: KnockoutObservable<number> = ko.observable(null);
        public transmissionCount: KnockoutObservable<number> = ko.observable(null);

       
        

        /** Add object to logEntries */
        public addToLogEntries = (autoSave?: boolean | null): LogEntry => {
            var newItem = new LogEntry();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.logEntries;
            newItem.isExpanded(true);
            newItem.callSignId(this.callSignId());
            this.logEntries.push(newItem);
            return newItem;
        };

        /** ListViewModel for LogEntries. Allows for loading subsets of data. */
        public logEntriesList: (loadImmediate?: boolean) => ListViewModels.LogEntryList;
        
        /** Add object to voiceTransmissions */
        public addToVoiceTransmissions = (autoSave?: boolean | null): VoiceTransmission => {
            var newItem = new VoiceTransmission();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.voiceTransmissions;
            newItem.isExpanded(true);
            newItem.callSignId(this.callSignId());
            this.voiceTransmissions.push(newItem);
            return newItem;
        };

        /** ListViewModel for VoiceTransmissions. Allows for loading subsets of data. */
        public voiceTransmissionsList: (loadImmediate?: boolean) => ListViewModels.VoiceTransmissionList;
        
        /** Add object to streams */
        public addToStreams = (autoSave?: boolean | null): Stream => {
            var newItem = new Stream();
            if (typeof(autoSave) == 'boolean'){
                newItem.coalesceConfig.autoSaveEnabled(autoSave);
            }
            newItem.parent = this;
            newItem.parentCollection = this.streams;
            newItem.isExpanded(true);
            newItem.callSignId(this.callSignId());
            this.streams.push(newItem);
            return newItem;
        };

        /** ListViewModel for Streams. Allows for loading subsets of data. */
        public streamsList: (loadImmediate?: boolean) => ListViewModels.StreamList;
        
        /** Url for a table view of all members of collection LogEntries for the current object. */
        public logEntriesListUrl: KnockoutComputed<string> = ko.computed(
            () => this.coalesceConfig.baseViewUrl() + '/LogEntry/Table?filter.callSignId=' + this.callSignId(),
            null, { deferEvaluation: true }
        );
        /** Url for a table view of all members of collection VoiceTransmissions for the current object. */
        public voiceTransmissionsListUrl: KnockoutComputed<string> = ko.computed(
            () => this.coalesceConfig.baseViewUrl() + '/VoiceTransmission/Table?filter.callSignId=' + this.callSignId(),
            null, { deferEvaluation: true }
        );
        /** Url for a table view of all members of collection Streams for the current object. */
        public streamsListUrl: KnockoutComputed<string> = ko.computed(
            () => this.coalesceConfig.baseViewUrl() + '/Stream/Table?filter.callSignId=' + this.callSignId(),
            null, { deferEvaluation: true }
        );





        /** 
            Load the ViewModel object from the DTO. 
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.callSignId;
            this.callSignId(data.callSignId);
            // Load the lists of other objects
            if (data.logEntries != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.logEntries, data.logEntries, 'logEntryId', LogEntry, this, allowCollectionDeletes);
            } 
            if (data.voiceTransmissions != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.voiceTransmissions, data.voiceTransmissions, 'voiceTransmissionId', VoiceTransmission, this, allowCollectionDeletes);
            } 
            if (data.streams != null) {
                // Merge the incoming array
                Coalesce.KnockoutUtilities.RebuildArray(this.streams, data.streams, 'streamId', Stream, this, allowCollectionDeletes);
            } 
            // Objects are loaded first so that they are available when the IDs get loaded.
            // This handles the issue with populating select lists with correct data because we now have the object.

            // The rest of the objects are loaded now.
            this.text(data.text);
            this.logCount(data.logCount);
            this.streamCount(data.streamCount);
            this.transmissionCount(data.transmissionCount);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
    
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
    
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.callSignId = this.callSignId();
            
            dto.text = this.text();
            dto.logCount = this.logCount();
            dto.streamCount = this.streamCount();
            dto.transmissionCount = this.transmissionCount();
            
            return dto;
        }

        /**
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            if (loadingCount == 0 && typeof(callback) == "function"){
                callback();
            }
        };
        
        public setupValidation = (): void => {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
    
        // Computed Observable for edit URL
        public editUrl: KnockoutComputed<string> = ko.pureComputed(() => {
            return this.coalesceConfig.baseViewUrl() + this.viewController + "/CreateEdit?id=" + this.callSignId();
        });

        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.CallSignList){
            super(parent);
            this.baseInitialize();
            var self = this;
            self.myId;

            // Create computeds for display for objects

    
            // List Object model for LogEntries. Allows for loading subsets of data.
            var _logEntriesList: ListViewModels.LogEntryList = null;
            self.logEntriesList = function(loadImmediate = true) {
                if (!_logEntriesList){
                    _logEntriesList = new ListViewModels.LogEntryList();
                    if (loadImmediate) loadLogEntriesList();
                    self.callSignId.subscribe(loadLogEntriesList)
                }
                return _logEntriesList;
            }
            function loadLogEntriesList() {
                if (self.callSignId()){
                    _logEntriesList.queryString = "filter.CallSignId=" + self.callSignId();
                    _logEntriesList.load();
                }
            }
            // List Object model for VoiceTransmissions. Allows for loading subsets of data.
            var _voiceTransmissionsList: ListViewModels.VoiceTransmissionList = null;
            self.voiceTransmissionsList = function(loadImmediate = true) {
                if (!_voiceTransmissionsList){
                    _voiceTransmissionsList = new ListViewModels.VoiceTransmissionList();
                    if (loadImmediate) loadVoiceTransmissionsList();
                    self.callSignId.subscribe(loadVoiceTransmissionsList)
                }
                return _voiceTransmissionsList;
            }
            function loadVoiceTransmissionsList() {
                if (self.callSignId()){
                    _voiceTransmissionsList.queryString = "filter.CallSignId=" + self.callSignId();
                    _voiceTransmissionsList.load();
                }
            }
            // List Object model for Streams. Allows for loading subsets of data.
            var _streamsList: ListViewModels.StreamList = null;
            self.streamsList = function(loadImmediate = true) {
                if (!_streamsList){
                    _streamsList = new ListViewModels.StreamList();
                    if (loadImmediate) loadStreamsList();
                    self.callSignId.subscribe(loadStreamsList)
                }
                return _streamsList;
            }
            function loadStreamsList() {
                if (self.callSignId()){
                    _streamsList.queryString = "filter.CallSignId=" + self.callSignId();
                    _streamsList.load();
                }
            }



            // This stuff needs to be done after everything else is set up.
            self.text.subscribe(self.autoSave);
            self.logCount.subscribe(self.autoSave);
            self.streamCount.subscribe(self.autoSave);
            self.transmissionCount.subscribe(self.autoSave);
        
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace CallSign {
    }
}
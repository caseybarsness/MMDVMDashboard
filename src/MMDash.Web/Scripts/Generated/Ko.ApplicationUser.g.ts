
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: ApplicationUser
// Generated by IntelliTect.Coalesce

module ViewModels {

	export class ApplicationUser extends Coalesce.BaseViewModel
    {
        public readonly modelName = "ApplicationUser";
        public readonly primaryKeyName: keyof this = "applicationUserId";
        public readonly modelDisplayName = "Application User";
        public readonly apiController = "/ApplicationUser";
        public readonly viewController = "/ApplicationUser";

        /** Behavioral configuration for all instances of ApplicationUser. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<ApplicationUser>
            = new Coalesce.ViewModelConfiguration<ApplicationUser>(Coalesce.GlobalConfiguration.viewModel);

        /** Behavioral configuration for the current ApplicationUser instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<ApplicationUser>(ApplicationUser.coalesceConfig);
    
        /** 
            The namespace containing all possible values of this.dataSource.
        */
        public dataSources: typeof ListViewModels.ApplicationUserDataSources = ListViewModels.ApplicationUserDataSources;
    

        public applicationUserId: KnockoutObservable<number> = ko.observable(null);
        public name: KnockoutObservable<string> = ko.observable(null);
        public id: KnockoutObservable<string> = ko.observable(null);
        public userName: KnockoutObservable<string> = ko.observable(null);
        public normalizedUserName: KnockoutObservable<string> = ko.observable(null);
        public email: KnockoutObservable<string> = ko.observable(null);
        public normalizedEmail: KnockoutObservable<string> = ko.observable(null);
        public emailConfirmed: KnockoutObservable<boolean> = ko.observable(null);
        public passwordHash: KnockoutObservable<string> = ko.observable(null);
        public securityStamp: KnockoutObservable<string> = ko.observable(null);
        public concurrencyStamp: KnockoutObservable<string> = ko.observable(null);
        public phoneNumber: KnockoutObservable<string> = ko.observable(null);
        public phoneNumberConfirmed: KnockoutObservable<boolean> = ko.observable(null);
        public twoFactorEnabled: KnockoutObservable<boolean> = ko.observable(null);
        public lockoutEnd: KnockoutObservable<moment.Moment> = ko.observable(null);
        public lockoutEnabled: KnockoutObservable<boolean> = ko.observable(null);
        public accessFailedCount: KnockoutObservable<number> = ko.observable(null);

       
        






        /** 
            Load the ViewModel object from the DTO. 
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.applicationUserId;
            this.applicationUserId(data.applicationUserId);
            // Load the lists of other objects
            // Objects are loaded first so that they are available when the IDs get loaded.
            // This handles the issue with populating select lists with correct data because we now have the object.

            // The rest of the objects are loaded now.
            this.name(data.name);
            this.userName(data.userName);
            this.normalizedUserName(data.normalizedUserName);
            this.email(data.email);
            this.normalizedEmail(data.normalizedEmail);
            this.emailConfirmed(data.emailConfirmed);
            this.passwordHash(data.passwordHash);
            this.securityStamp(data.securityStamp);
            this.concurrencyStamp(data.concurrencyStamp);
            this.phoneNumber(data.phoneNumber);
            this.phoneNumberConfirmed(data.phoneNumberConfirmed);
            this.twoFactorEnabled(data.twoFactorEnabled);
            if (data.lockoutEnd == null) this.lockoutEnd(null);
            else if (this.lockoutEnd() == null || this.lockoutEnd().valueOf() != new Date(data.lockoutEnd).getTime()){
                this.lockoutEnd(moment(new Date(data.lockoutEnd)));
            }
            this.lockoutEnabled(data.lockoutEnabled);
            this.accessFailedCount(data.accessFailedCount);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
    
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
    
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.applicationUserId = this.applicationUserId();
            
            dto.name = this.name();
            dto.userName = this.userName();
            dto.normalizedUserName = this.normalizedUserName();
            dto.email = this.email();
            dto.normalizedEmail = this.normalizedEmail();
            dto.emailConfirmed = this.emailConfirmed();
            dto.passwordHash = this.passwordHash();
            dto.securityStamp = this.securityStamp();
            dto.concurrencyStamp = this.concurrencyStamp();
            dto.phoneNumber = this.phoneNumber();
            dto.phoneNumberConfirmed = this.phoneNumberConfirmed();
            dto.twoFactorEnabled = this.twoFactorEnabled();
            if (!this.lockoutEnd()) dto.lockoutEnd = null;
            else dto.lockoutEnd = this.lockoutEnd().format('YYYY-MM-DDTHH:mm:ssZZ');
            dto.lockoutEnabled = this.lockoutEnabled();
            dto.accessFailedCount = this.accessFailedCount();
            
            return dto;
        }

        /**
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            if (loadingCount == 0 && typeof(callback) == "function"){
                callback();
            }
        };
        
        public setupValidation = (): void => {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.lockoutEnd.extend({ moment: { unix: true } }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
    
        // Computed Observable for edit URL
        public editUrl: KnockoutComputed<string> = ko.pureComputed(() => {
            return this.coalesceConfig.baseViewUrl() + this.viewController + "/CreateEdit?id=" + this.applicationUserId();
        });

        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.ApplicationUserList){
            super(parent);
            this.baseInitialize();
            var self = this;
            self.myId;

            // Create computeds for display for objects

    



            // This stuff needs to be done after everything else is set up.
            self.name.subscribe(self.autoSave);
            self.userName.subscribe(self.autoSave);
            self.normalizedUserName.subscribe(self.autoSave);
            self.email.subscribe(self.autoSave);
            self.normalizedEmail.subscribe(self.autoSave);
            self.emailConfirmed.subscribe(self.autoSave);
            self.passwordHash.subscribe(self.autoSave);
            self.securityStamp.subscribe(self.autoSave);
            self.concurrencyStamp.subscribe(self.autoSave);
            self.phoneNumber.subscribe(self.autoSave);
            self.phoneNumberConfirmed.subscribe(self.autoSave);
            self.twoFactorEnabled.subscribe(self.autoSave);
            self.lockoutEnd.subscribe(self.autoSave);
            self.lockoutEnabled.subscribe(self.autoSave);
            self.accessFailedCount.subscribe(self.autoSave);
        
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace ApplicationUser {
    }
}
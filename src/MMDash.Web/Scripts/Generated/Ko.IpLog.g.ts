
/// <reference path="../coalesce.dependencies.d.ts" />

// Knockout View Model for: IpLog
// Generated by IntelliTect.Coalesce

module ViewModels {

	export class IpLog extends Coalesce.BaseViewModel
    {
        public readonly modelName = "IpLog";
        public readonly primaryKeyName: keyof this = "ipLogId";
        public readonly modelDisplayName = "Ip Log";
        public readonly apiController = "/IpLog";
        public readonly viewController = "/IpLog";

        /** Behavioral configuration for all instances of IpLog. Can be overidden on each instance via instance.coalesceConfig. */
        public static coalesceConfig: Coalesce.ViewModelConfiguration<IpLog>
            = new Coalesce.ViewModelConfiguration<IpLog>(Coalesce.GlobalConfiguration.viewModel);

        /** Behavioral configuration for the current IpLog instance. */
        public coalesceConfig: Coalesce.ViewModelConfiguration<this>
            = new Coalesce.ViewModelConfiguration<IpLog>(IpLog.coalesceConfig);
    
        /** 
            The namespace containing all possible values of this.dataSource.
        */
        public dataSources: typeof ListViewModels.IpLogDataSources = ListViewModels.IpLogDataSources;
    

        public ipLogId: KnockoutObservable<number> = ko.observable(null);
        public radioIdLogId: KnockoutObservable<number> = ko.observable(null);
        public radioIdLog: KnockoutObservable<ViewModels.RadioIdLog> = ko.observable(null);
        public logDateTime: KnockoutObservable<moment.Moment> = ko.observable(moment());
        public ipAddress: KnockoutObservable<string> = ko.observable(null);
        public lat: KnockoutObservable<string> = ko.observable(null);
        public long: KnockoutObservable<string> = ko.observable(null);
        public callSignString: KnockoutObservable<string> = ko.observable(null);

       
        /** Display text for RadioIdLog */
        public radioIdLogText: KnockoutComputed<string>;
        


        /** Pops up a stock editor for object radioIdLog */
        public showRadioIdLogEditor: (callback?: any) => void;




        /** 
            Load the ViewModel object from the DTO. 
            @param force: Will override the check against isLoading that is done to prevent recursion. False is default.
            @param allowCollectionDeletes: Set true when entire collections are loaded. True is the default. In some cases only a partial collection is returned, set to false to only add/update collections.
        */
        public loadFromDto = (data: any, force: boolean = false, allowCollectionDeletes: boolean = true): void => {
            if (!data || (!force && this.isLoading())) return;
            this.isLoading(true);
            // Set the ID 
            this.myId = data.ipLogId;
            this.ipLogId(data.ipLogId);
            // Load the lists of other objects
            // Objects are loaded first so that they are available when the IDs get loaded.
            // This handles the issue with populating select lists with correct data because we now have the object.
            if (!data.radioIdLog) { 
                if (data.radioIdLogId != this.radioIdLogId()) {
                    this.radioIdLog(null);
                }
            } else {
                if (!this.radioIdLog()){
                    this.radioIdLog(new RadioIdLog(data.radioIdLog, this));
                } else {
                    this.radioIdLog().loadFromDto(data.radioIdLog);
                }
                if (this.parent instanceof RadioIdLog && this.parent !== this.radioIdLog() && this.parent.radioIdLogId() == this.radioIdLog().radioIdLogId())
                {
                    this.parent.loadFromDto(data.radioIdLog, null, false);
                }
            }

            // The rest of the objects are loaded now.
            this.radioIdLogId(data.radioIdLogId);
            if (data.logDateTime == null) this.logDateTime(null);
            else if (this.logDateTime() == null || this.logDateTime().valueOf() != new Date(data.logDateTime).getTime()){
                this.logDateTime(moment(new Date(data.logDateTime)));
            }
            this.ipAddress(data.ipAddress);
            this.lat(data.lat);
            this.long(data.long);
            this.callSignString(data.callSignString);
            if (this.coalesceConfig.onLoadFromDto()){
                this.coalesceConfig.onLoadFromDto()(this as any);
            }
            this.isLoading(false);
            this.isDirty(false);
    
            if (this.coalesceConfig.validateOnLoadFromDto()) this.validate();
        };
    
        /** Saves this object into a data transfer object to send to the server. */
        public saveToDto = (): any => {
            var dto: any = {};
            dto.ipLogId = this.ipLogId();
            
            dto.radioIdLogId = this.radioIdLogId();
            if (!dto.radioIdLogId && this.radioIdLog()) {
                dto.radioIdLogId = this.radioIdLog().radioIdLogId();
            }
            if (!this.logDateTime()) dto.logDateTime = null;
            else dto.logDateTime = this.logDateTime().format('YYYY-MM-DDTHH:mm:ss');
            dto.ipAddress = this.ipAddress();
            dto.lat = this.lat();
            dto.long = this.long();
            dto.callSignString = this.callSignString();
            
            return dto;
        }

        /**
            Loads any child objects that have an ID set, but not the full object.
            This is useful when creating an object that has a parent object and the ID is set on the new child.
        */
        public loadChildren = (callback?: () => void): void => {
            var loadingCount = 0;
            // See if this.radioIdLog needs to be loaded.
            if (this.radioIdLog() == null && this.radioIdLogId() != null){
                loadingCount++;
                var radioIdLogObj = new RadioIdLog();
                radioIdLogObj.load(this.radioIdLogId(), () => {
                    loadingCount--;
                    this.radioIdLog(radioIdLogObj);
                    if (loadingCount == 0 && typeof(callback) == "function"){
                        callback();
                    }
                });
            }
            if (loadingCount == 0 && typeof(callback) == "function"){
                callback();
            }
        };
        
        public setupValidation = (): void => {
            if (this.errors !== null) return;
            this.errors = ko.validation.group([
                this.radioIdLogId.extend({ required: {params: true, message: "Radio Id Log is required."} }),
                this.logDateTime.extend({ moment: { unix: true } }),
            ]);
            this.warnings = ko.validation.group([
            ]);
        }
    
        // Computed Observable for edit URL
        public editUrl: KnockoutComputed<string> = ko.pureComputed(() => {
            return this.coalesceConfig.baseViewUrl() + this.viewController + "/CreateEdit?id=" + this.ipLogId();
        });

        constructor(newItem?: object, parent?: Coalesce.BaseViewModel | ListViewModels.IpLogList){
            super(parent);
            this.baseInitialize();
            var self = this;
            self.myId;

            // Create computeds for display for objects
			self.radioIdLogText = ko.pureComputed(function()
			{   // If the object exists, use the text value. Otherwise show 'None'
				if (self.radioIdLog() && self.radioIdLog().radioIdLogId()) {
					return self.radioIdLog().radioIdLogId().toString();
				} else {
					return "None";
				}
			});

    


            self.showRadioIdLogEditor = function(callback: any) {
                if (!self.radioIdLog()) {
                    self.radioIdLog(new RadioIdLog());
                }
                self.radioIdLog().showEditor(callback)
            };

            // This stuff needs to be done after everything else is set up.
            self.radioIdLogId.subscribe(self.autoSave);
            self.radioIdLog.subscribe(self.autoSave);
            self.logDateTime.subscribe(self.autoSave);
            self.ipAddress.subscribe(self.autoSave);
            self.lat.subscribe(self.autoSave);
            self.long.subscribe(self.autoSave);
            self.callSignString.subscribe(self.autoSave);
        
            if (newItem) {
                self.loadFromDto(newItem, true);
            }
        }
    }





    export namespace IpLog {
    }
}
@using IntelliTect.Coalesce.Knockout.Helpers
@{ ViewBag.Fluid = true; }

<style>
    td div a {
        display: block;
    }

    th.sortable-header {
        cursor: pointer;
    }

    th.sortable-header:hover {
        background-color: #e6e6e6
    }
    .table-view-header{
        padding: 10px 15px;
    }
</style>

<div class="table-view obj-callSign">
    <div class="table-view-header">
        <div class="clearfix">
            <h1 style="display: inline-block">
                Call Sign List
                    <span style="font-size: .5em; padding-left: 20px;"><a href="~/CallSign/Docs">API Docs</a></span>
            </h1>
            <span class="label label-info" data-bind="fadeVisible: isLoading()">Loading...</span>
        </div>

        <div class="clearfix">
            <div style="display: inline-block; font-size: 1.1em; margin-right: 10px;">
                <i class="fa fa-arrow-circle-left" data-bind="enabled: previousPageEnabled() && !isLoading(), click: previousPage"></i>
                Page
                <input data-bind="value: page" style="width: 35px">
                of
                <span data-bind="text: pageCount"></span>
                <i class="fa fa-arrow-circle-right" data-bind="enabled: nextPageEnabled() && !isLoading(), click: nextPage"></i>
            </div>
            <select data-bind="value:pageSize" class="form-control" style="width: 100px; display: inline-block">
                <option value="1">1</option>
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="50">50</option>
                <option value="100">100</option>
                <option value="500">500</option>
                <option value="1000">1000</option>
            </select>

            <input class="form-control pull-right" style="width: 250px; margin-left: 20px" data-bind="textInput: search" placeholder="Search" />

            <div class="btn-group pull-right">
                        <a href="~/CallSign/CreateEdit?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-plus"></i> Create</a>
                    <button data-bind="click:load" class="btn btn-sm btn-default "><i class="fa fa-refresh"></i> Refresh</button>
                    @if (ViewBag.Editable)
                    {
                    <a href="~/CallSign/Table?@(ViewBag.Query)" role="button" class="btn btn-sm btn-default "><i class="fa fa-lock"></i> Make Read-only</a>
                    }
                        else
                        {
                        <a href="~/CallSign/TableEdit?@ViewBag.Query" role="button" class="btn btn-sm btn-default "><i class="fa fa-pencil"></i> Make Editable</a>
                        }
                    <a href="#" role="button" class="btn btn-sm btn-default " data-bind="attr:{href: downloadAllCsvUrl}"><i class="fa fa-download"></i> CSV</a>
                        <button role="button" class="btn btn-sm btn-default " data-bind="click: csvUploadUi"><i class="fa fa-upload"></i> CSV</button>
            </div>
        </div>
    </div>
    <hr />
    <div class="card table-view-body">
        <div class="card-body">
                <table class="table @(ViewBag.Editable ? " editable" : "" )">
            <thead>
                <tr>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('Text')}">
                                Text
                                <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'Text', 'fa-caret-down': orderByDescending() == 'Text'}"></i>
                            </th>
                            <th>Log Entries</th>
                            <th>Voice Transmissions</th>
                            <th>Streams</th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('LogCount')}">
                                Log Count
                                <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'LogCount', 'fa-caret-down': orderByDescending() == 'LogCount'}"></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('StreamCount')}">
                                Stream Count
                                <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'StreamCount', 'fa-caret-down': orderByDescending() == 'StreamCount'}"></i>
                            </th>
                            <th class="sortable-header" data-bind="click: function(){orderByToggle('TransmissionCount')}">
                                Transmission Count
                                <i class="pull-right fa" data-bind="css:{'fa-caret-up': orderBy() == 'TransmissionCount', 'fa-caret-down': orderByDescending() == 'TransmissionCount'}"></i>
                            </th>
                    <th style="width: 1%">
                    </th>
                </tr>

            </thead>
            <tbody>
                <!-- ko foreach: items -->
                <tr data-bind="css: {'btn-warning': errorMessage()}, attr: {id: callSignId}">
                        @if (@ViewBag.Editable)
                        {
                            
                            <td class="prop-text">@(Knockout.InputFor<MMDash.Data.Models.CallSign>(p => p.Text))</td>
                            
                            <td class="prop-logEntries"><a data-bind='attr: {href: logEntriesListUrl}, text: logEntries().length + " - Edit"' class='btn btn-default btn-sm'></a></td>
                            
                            <td class="prop-voiceTransmissions"><a data-bind='attr: {href: voiceTransmissionsListUrl}, text: voiceTransmissions().length + " - Edit"' class='btn btn-default btn-sm'></a></td>
                            
                            <td class="prop-streams"><a data-bind='attr: {href: streamsListUrl}, text: streams().length + " - Edit"' class='btn btn-default btn-sm'></a></td>
                            
                            <td class="prop-logCount">@(Knockout.InputFor<MMDash.Data.Models.CallSign>(p => p.LogCount))</td>
                            
                            <td class="prop-streamCount">@(Knockout.InputFor<MMDash.Data.Models.CallSign>(p => p.StreamCount))</td>
                            
                            <td class="prop-transmissionCount">@(Knockout.InputFor<MMDash.Data.Models.CallSign>(p => p.TransmissionCount))</td>
                        }
                        else
                        {
                            
                            <td class="prop-text">@(Knockout.DisplayFor<MMDash.Data.Models.CallSign>(p => p.Text, true))</td>
                            
                            <td class="prop-logEntries"><a data-bind='attr: {href: logEntriesListUrl}, text: logEntries().length + " - Edit"' class='btn btn-default btn-sm'></a></td>
                            
                            <td class="prop-voiceTransmissions"><a data-bind='attr: {href: voiceTransmissionsListUrl}, text: voiceTransmissions().length + " - Edit"' class='btn btn-default btn-sm'></a></td>
                            
                            <td class="prop-streams"><a data-bind='attr: {href: streamsListUrl}, text: streams().length + " - Edit"' class='btn btn-default btn-sm'></a></td>
                            
                            <td class="prop-logCount">@(Knockout.DisplayFor<MMDash.Data.Models.CallSign>(p => p.LogCount, true))</td>
                            
                            <td class="prop-streamCount">@(Knockout.DisplayFor<MMDash.Data.Models.CallSign>(p => p.StreamCount, true))</td>
                            
                            <td class="prop-transmissionCount">@(Knockout.DisplayFor<MMDash.Data.Models.CallSign>(p => p.TransmissionCount, true))</td>
                        }
                    <td>

                        <!-- Editor buttons -->
                        <div class="btn-group pull-right" role="group" style="display: inline-flex">
                                                            <a data-bind="attr:{ href: editUrl }" class="btn btn-sm btn-default">
                                    <i class="fa fa-pencil"></i>
                                </a>
                                                            <button data-bind="click: deleteItemWithConfirmation" class="btn btn-sm btn-danger">
                                    <i class="fa fa-remove"></i>
                                </button>

                        </div>
                        <div class="form-control-static" data-bind="text: errorMessage"></div>
                    </td>
                </tr>
                <!-- /ko -->
            </tbody>
        </table>
    </div>
</div>
</div>





    @section Scripts
    {

    <script>
        @if (!ViewBag.Editable)
        {
            @:Coalesce.GlobalConfiguration.viewModel.setupValidationAutomatically(false);
        }
        var callSignList = new ListViewModels.CallSignList();
        
        // Set up parent info based on the URL.
        @if (ViewBag.Query != null)
        {
            @:callSignList.queryString = "@(ViewBag.Query)";
        }

        // Save and restore values from the URL:
        var urlVariables = ['page', 'pageSize', 'search', 'orderBy', 'orderByDescending'];
        $.each(urlVariables, function(){
            var param = Coalesce.Utilities.GetUrlParameter(this);
            if (param) {callSignList[this](param);}
        })
        callSignList.isLoading.subscribe(function(){
            var newUrl = window.location.href;
            
            $.each(urlVariables, function(){
                var param = callSignList[this]();
                newUrl = Coalesce.Utilities.SetUrlParameter(newUrl, this, param);
            })
            history.replaceState(null, document.title, newUrl);
        });

        callSignList.isSavingAutomatically = false;
        ko.applyBindings(callSignList);
        callSignList.isSavingAutomatically = true;

        callSignList.includes = "CallSignListGen";
        callSignList.load();

    </script>
    }
